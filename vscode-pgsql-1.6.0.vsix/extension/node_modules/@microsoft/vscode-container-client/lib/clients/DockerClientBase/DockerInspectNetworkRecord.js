"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeDockerInspectNetworkRecord = exports.isDockerInspectNetworkRecord = void 0;
const dayjs_1 = require("../../utils/dayjs");
function isDockerInspectNetworkRecord(maybeNetwork) {
    const network = maybeNetwork;
    if (!network || typeof network !== 'object') {
        return false;
    }
    if (typeof network.Id !== 'string') {
        return false;
    }
    if (typeof network.Name !== 'string') {
        return false;
    }
    if (typeof network.Scope !== 'string') {
        return false;
    }
    if (typeof network.Labels !== 'object') {
        return false;
    }
    if (network.IPAM === null || typeof network.IPAM !== 'object' || typeof network.IPAM.Driver !== 'string') {
        return false;
    }
    if (typeof network.EnableIPv6 !== 'boolean') {
        return false;
    }
    if (typeof network.Internal !== 'boolean') {
        return false;
    }
    if (typeof network.Attachable !== 'boolean') {
        return false;
    }
    if (typeof network.Ingress !== 'boolean') {
        return false;
    }
    if (typeof network.Created !== 'string') {
        return false;
    }
    return true;
}
exports.isDockerInspectNetworkRecord = isDockerInspectNetworkRecord;
function normalizeDockerInspectNetworkRecord(network) {
    var _a, _b;
    const ipam = {
        driver: network.IPAM.Driver,
        config: (_b = (_a = network.IPAM.Config) === null || _a === void 0 ? void 0 : _a.map(({ Subnet, Gateway }) => ({
            subnet: Subnet,
            gateway: Gateway,
        }))) !== null && _b !== void 0 ? _b : [],
    };
    const createdAt = dayjs_1.dayjs.utc(network.Created).toDate();
    // Return the normalized InspectNetworksItem record
    return {
        id: network.Id,
        name: network.Name,
        driver: network.Driver,
        scope: network.Scope,
        labels: network.Labels || {},
        ipam,
        ipv6: network.EnableIPv6,
        internal: network.Internal,
        attachable: network.Attachable,
        ingress: network.Ingress,
        createdAt,
        raw: JSON.stringify(network),
    };
}
exports.normalizeDockerInspectNetworkRecord = normalizeDockerInspectNetworkRecord;
//# sourceMappingURL=DockerInspectNetworkRecord.js.map