"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeContainerState = exports.normalizeDockerListContainerRecord = exports.isDockerListContainerRecord = void 0;
const dayjs_1 = require("../../utils/dayjs");
const parseDockerLikeImageName_1 = require("../../utils/parseDockerLikeImageName");
const parseDockerLikeLabels_1 = require("./parseDockerLikeLabels");
const parseDockerRawPortString_1 = require("./parseDockerRawPortString");
function isDockerListContainerRecord(maybeContainer) {
    const container = maybeContainer;
    if (!container || typeof container !== 'object') {
        return false;
    }
    if (typeof container.ID !== 'string') {
        return false;
    }
    if (typeof container.Names !== 'string') {
        return false;
    }
    if (typeof container.Image !== 'string') {
        return false;
    }
    if (typeof container.Ports !== 'string') {
        return false;
    }
    if (typeof container.Networks !== 'string') {
        return false;
    }
    if (typeof container.Labels !== 'string') {
        return false;
    }
    if (typeof container.CreatedAt !== 'string') {
        return false;
    }
    if (typeof container.Status !== 'string') {
        return false;
    }
    return true;
}
exports.isDockerListContainerRecord = isDockerListContainerRecord;
function normalizeDockerListContainerRecord(container, strict) {
    const labels = (0, parseDockerLikeLabels_1.parseDockerLikeLabels)(container.Labels);
    const ports = container.Ports
        .split(',')
        .map((port) => port.trim())
        .filter((port) => !!port)
        .reduce((portBindings, rawPort) => {
        const parsedPort = (0, parseDockerRawPortString_1.parseDockerRawPortString)(rawPort);
        if (parsedPort) {
            return portBindings.concat(parsedPort);
        }
        else if (strict) {
            throw new Error('Invalid container JSON');
        }
        else {
            return portBindings;
        }
    }, []);
    const networks = container.Networks
        .split(',');
    const name = container.Names.split(',')[0].trim();
    const createdAt = dayjs_1.dayjs.utc(container.CreatedAt).toDate();
    return {
        id: container.ID,
        name,
        labels,
        image: (0, parseDockerLikeImageName_1.parseDockerLikeImageName)(container.Image),
        ports,
        networks,
        createdAt,
        state: normalizeContainerState(container),
        status: container.Status,
    };
}
exports.normalizeDockerListContainerRecord = normalizeDockerListContainerRecord;
// Exported just for tests, also why the typing is just a subset of the full record
function normalizeContainerState(container) {
    if (container.State) {
        return container.State;
    }
    if (/paused/i.test(container.Status)) {
        return 'paused';
    }
    else if (/exit|terminate|dead/i.test(container.Status)) {
        return 'exited';
    }
    else if (/created/i.test(container.Status)) {
        return 'created';
    }
    else if (/up/i.test(container.Status)) {
        return 'running';
    }
    return 'unknown';
}
exports.normalizeContainerState = normalizeContainerState;
//# sourceMappingURL=DockerListContainerRecord.js.map