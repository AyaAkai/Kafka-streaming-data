"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeDockerListNetworkRecord = exports.isDockerListNetworkRecord = void 0;
const dayjs_1 = require("../../utils/dayjs");
const parseDockerLikeLabels_1 = require("./parseDockerLikeLabels");
function isDockerListNetworkRecord(maybeNetwork) {
    const network = maybeNetwork;
    if (!network || typeof network !== 'object') {
        return false;
    }
    if (typeof network.ID !== 'string') {
        return false;
    }
    if (typeof network.Name !== 'string') {
        return false;
    }
    if (typeof network.Driver !== 'string') {
        return false;
    }
    if (typeof network.Labels !== 'string') {
        return false;
    }
    if (typeof network.Scope !== 'string') {
        return false;
    }
    if (typeof network.IPv6 !== 'string') {
        return false;
    }
    if (typeof network.CreatedAt !== 'string') {
        return false;
    }
    if (typeof network.Internal !== 'string') {
        return false;
    }
    return true;
}
exports.isDockerListNetworkRecord = isDockerListNetworkRecord;
function normalizeDockerListNetworkRecord(network) {
    // Parse the labels assigned to the networks and normalize to key value pairs
    const labels = (0, parseDockerLikeLabels_1.parseDockerLikeLabels)(network.Labels);
    const createdAt = dayjs_1.dayjs.utc(network.CreatedAt).toDate();
    return {
        id: network.ID,
        name: network.Name,
        driver: network.Driver,
        labels,
        scope: network.Scope,
        ipv6: network.IPv6.toLowerCase() === 'true',
        internal: network.Internal.toLowerCase() === 'true',
        createdAt,
    };
}
exports.normalizeDockerListNetworkRecord = normalizeDockerListNetworkRecord;
//# sourceMappingURL=DockerListNetworkRecord.js.map