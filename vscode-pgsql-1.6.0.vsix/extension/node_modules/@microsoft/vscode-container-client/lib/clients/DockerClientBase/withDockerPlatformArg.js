"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.withDockerPlatformArg = exports.formatDockerPlatform = void 0;
const commandLineBuilder_1 = require("../../utils/commandLineBuilder");
const getNativeArchitecture_1 = require("../../utils/getNativeArchitecture");
const normalizeContainerOS_1 = require("../../utils/normalizeContainerOS");
function formatDockerPlatform(platform) {
    if (!(platform === null || platform === void 0 ? void 0 : platform.os) && !(platform === null || platform === void 0 ? void 0 : platform.architecture)) {
        return undefined;
    }
    const os = (0, normalizeContainerOS_1.normalizeContainerOS)(platform === null || platform === void 0 ? void 0 : platform.os);
    const architecture = (platform === null || platform === void 0 ? void 0 : platform.architecture) || (0, getNativeArchitecture_1.getNativeArchitecture)();
    return `${os}/${architecture}`;
}
exports.formatDockerPlatform = formatDockerPlatform;
/**
 * This method formats the `platform` flag for the Docker CLI.
 *
 * The `os` and `architecture` properties are extracted and used to create a new `ContainerPlatform`
 * object. If either property is missing, a default value ofp `'linux'` for `os` or the result of
 * `getNativeArchitecture()` for `architecture` is used.
 *
 * If an empty object is passed in, `undefined` is returned, which will allow the Docker CLI to
 * skip the `--platform` flag entirely and use the default platform.
 *
 * @param platform
 * @returns
 */
function withDockerPlatformArg(platform) {
    return (0, commandLineBuilder_1.withNamedArg)('--platform', formatDockerPlatform(platform));
}
exports.withDockerPlatformArg = withDockerPlatformArg;
//# sourceMappingURL=withDockerPlatformArg.js.map