"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DockerComposeClient_composeV2;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DockerComposeClient = void 0;
const commandLineBuilder_1 = require("../../utils/commandLineBuilder");
const streamToGenerator_1 = require("../../utils/streamToGenerator");
const ConfigurableClient_1 = require("../ConfigurableClient");
function withCommonOrchestratorArgs(options) {
    return (0, commandLineBuilder_1.composeArgs)((0, commandLineBuilder_1.withNamedArg)('--file', options.files), (0, commandLineBuilder_1.withNamedArg)('--env-file', options.environmentFile), (0, commandLineBuilder_1.withNamedArg)('--project-name', options.projectName), (0, commandLineBuilder_1.withNamedArg)('--profile', options.profiles));
}
function withComposeArg(composeV2) {
    // If using Compose V2, then add the `compose` argument at the beginning
    // That way, the command is `docker compose` instead of `docker-compose`
    return (0, commandLineBuilder_1.withArg)(composeV2 ? 'compose' : undefined);
}
class DockerComposeClient extends ConfigurableClient_1.ConfigurableClient {
    /**
     * Constructs a new {@link DockerComposeClient}
     * @param commandName (Optional, default `docker`) The command that will be run
     * as the base command. If quoting is necessary, it is the responsibility of the
     * caller to add.
     * @param displayName (Optional, default 'Docker Compose') The human-friendly display
     * name of the client
     * @param description (Optional, with default) The human-friendly description of
     * the client
     * @param composeV2 (Optional, default `true`) If true, `compose` will be added as the
     * first argument to all commands. The base command should be `docker`.
     */
    constructor(commandName, displayName = 'Docker Compose', description = 'Runs orchestrator commands using the Docker Compose CLI', composeV2 = true) {
        super(DockerComposeClient.ClientId, commandName || composeV2 ? 'docker' : 'docker-compose', displayName, description);
        _DockerComposeClient_composeV2.set(this, void 0);
        __classPrivateFieldSet(this, _DockerComposeClient_composeV2, composeV2, "f");
    }
    get composeV2() {
        return __classPrivateFieldGet(this, _DockerComposeClient_composeV2, "f");
    }
    set composeV2(value) {
        __classPrivateFieldSet(this, _DockerComposeClient_composeV2, value, "f");
    }
    //#region Up command
    getUpCommandArgs(options) {
        var _a;
        return (0, commandLineBuilder_1.composeArgs)(withComposeArg(this.composeV2), withCommonOrchestratorArgs(options), (0, commandLineBuilder_1.withArg)('up'), (0, commandLineBuilder_1.withFlagArg)('--detach', options.detached), (0, commandLineBuilder_1.withFlagArg)('--build', options.build), (0, commandLineBuilder_1.withNamedArg)('--scale', Object.entries(options.scale || {}).map(([service, scale]) => `${service}=${scale}`)), (0, commandLineBuilder_1.withNamedArg)('--timeout', (_a = options.timeoutSeconds) === null || _a === void 0 ? void 0 : _a.toString(10)), (0, commandLineBuilder_1.withFlagArg)('--wait', options.wait), (0, commandLineBuilder_1.withVerbatimArg)(options.customOptions), (0, commandLineBuilder_1.withArg)(...(options.services || [])))();
    }
    /**
     * Generates the necessary information for running of an orchestrator up command for Docker Compose
     * @param options Standard orchestrator up command options
     * @returns A CommandResponse indicating how to run an orchestrator up command for Docker Compose
     */
    async up(options) {
        return {
            command: this.commandName,
            args: this.getUpCommandArgs(options),
        };
    }
    //#endregion Up command
    //#region Down command
    getDownCommandArgs(options) {
        var _a;
        return (0, commandLineBuilder_1.composeArgs)(withComposeArg(this.composeV2), withCommonOrchestratorArgs(options), (0, commandLineBuilder_1.withArg)('down'), (0, commandLineBuilder_1.withNamedArg)('--rmi', options.removeImages), (0, commandLineBuilder_1.withFlagArg)('--volumes', options.removeVolumes), (0, commandLineBuilder_1.withNamedArg)('--timeout', (_a = options.timeoutSeconds) === null || _a === void 0 ? void 0 : _a.toString(10)), (0, commandLineBuilder_1.withVerbatimArg)(options.customOptions), (0, commandLineBuilder_1.withArg)(...(options.services || [])))();
    }
    /**
     * Generates the necessary information for running of an orchestrator down command for Docker Compose
     * @param options Standard orchestrator down command options
     * @returns A CommandResponse indicating how to run an orchestrator down command for Docker Compose
     */
    async down(options) {
        return {
            command: this.commandName,
            args: this.getDownCommandArgs(options),
        };
    }
    //#endregion Down command
    //#region Start command
    getStartCommandArgs(options) {
        return (0, commandLineBuilder_1.composeArgs)(withComposeArg(this.composeV2), withCommonOrchestratorArgs(options), (0, commandLineBuilder_1.withArg)('start'), (0, commandLineBuilder_1.withArg)(...(options.services || [])))();
    }
    /**
     * Generates the necessary information for running of an orchestrator start command for Docker Compose
     * @param options Standard orchestrator start command options
     * @returns A CommandResponse indicating how to run an orchestrator start command for Docker Compose
     */
    async start(options) {
        return {
            command: this.commandName,
            args: this.getStartCommandArgs(options),
        };
    }
    //#endregion Start command
    //#region Stop command
    getStopCommandArgs(options) {
        var _a;
        return (0, commandLineBuilder_1.composeArgs)(withComposeArg(this.composeV2), withCommonOrchestratorArgs(options), (0, commandLineBuilder_1.withArg)('stop'), (0, commandLineBuilder_1.withNamedArg)('--timeout', (_a = options.timeoutSeconds) === null || _a === void 0 ? void 0 : _a.toString(10)), (0, commandLineBuilder_1.withArg)(...(options.services || [])))();
    }
    /**
     * Generates the necessary information for running of an orchestrator stop command for Docker Compose
     * @param options Standard orchestrator stop command options
     * @returns A CommandResponse indicating how to run an orchestrator stop command for Docker Compose
     */
    async stop(options) {
        return {
            command: this.commandName,
            args: this.getStopCommandArgs(options),
        };
    }
    //#endregion Stop command
    //#region Restart command
    getRestartCommandArgs(options) {
        var _a;
        return (0, commandLineBuilder_1.composeArgs)(withComposeArg(this.composeV2), withCommonOrchestratorArgs(options), (0, commandLineBuilder_1.withArg)('restart'), (0, commandLineBuilder_1.withNamedArg)('--timeout', (_a = options.timeoutSeconds) === null || _a === void 0 ? void 0 : _a.toString(10)), (0, commandLineBuilder_1.withArg)(...(options.services || [])))();
    }
    /**
     * Generates the necessary information for running of an orchestrator restart command for Docker Compose
     * @param options Standard orchestrator restart command options
     * @returns A CommandResponse indicating how to run an orchestrator restart command for Docker Compose
     */
    async restart(options) {
        return {
            command: this.commandName,
            args: this.getRestartCommandArgs(options),
        };
    }
    //#endregion Restart command
    //#region Logs command
    getLogsCommandArgs(options) {
        var _a;
        return (0, commandLineBuilder_1.composeArgs)(withComposeArg(this.composeV2), withCommonOrchestratorArgs(options), (0, commandLineBuilder_1.withArg)('logs'), (0, commandLineBuilder_1.withFlagArg)('--follow', options.follow), (0, commandLineBuilder_1.withNamedArg)('--tail', (_a = options.tail) === null || _a === void 0 ? void 0 : _a.toString(10)), (0, commandLineBuilder_1.withArg)(...(options.services || [])))();
    }
    /**
     * Generates the necessary information for running of an orchestrator logs command for Docker Compose
     * @param options Standard orchestrator logs command options
     * @returns A CommandResponse indicating how to run an orchestrator logs command for Docker Compose
     */
    async logs(options) {
        return {
            command: this.commandName,
            args: this.getLogsCommandArgs(options),
            parseStream: (output, strict) => (0, streamToGenerator_1.stringStreamToGenerator)(output),
        };
    }
    //#endregion Logs command
    //#region Config command
    getConfigCommandArgs(options) {
        return (0, commandLineBuilder_1.composeArgs)(withComposeArg(this.composeV2), withCommonOrchestratorArgs(options), (0, commandLineBuilder_1.withArg)('config'), (0, commandLineBuilder_1.withArg)(`--${options.configType}`))();
    }
    async parseConfigCommandOutput(output, strict) {
        return output.split('\n').filter((config) => config);
    }
    /**
     * Generates the necessary information for running of an orchestrator config command for Docker Compose
     * @param options Standard orchestrator config command options
     * @returns A CommandResponse indicating how to run an orchestrator config command for Docker Compose
     */
    async config(options) {
        return {
            command: this.commandName,
            args: this.getConfigCommandArgs(options),
            parse: this.parseConfigCommandOutput,
        };
    }
}
exports.DockerComposeClient = DockerComposeClient;
_DockerComposeClient_composeV2 = new WeakMap();
/**
 * The ID of the Docker Compose client
 */
DockerComposeClient.ClientId = 'com.microsoft.visualstudio.orchestrators.dockercompose';
//# sourceMappingURL=DockerComposeClient.js.map