"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.cmdAddNewConnection = exports.cmdRebuildIntelliSenseCache = exports.cmdClearPooledConnections = exports.cmdManageConnectionProfiles = exports.cmdSchemaCompare = exports.cmdNewQuery = exports.cmdCommandPaletteQueryHistory = exports.cmdPauseQueryHistory = exports.cmdStartQueryHistory = exports.cmdCopyQueryHistory = exports.cmdRunQueryHistory = exports.cmdOpenQueryHistory = exports.cmdDeleteQueryHistory = exports.cmdClearAllQueryHistory = exports.cmdRefreshQueryHistory = exports.cmdShowGettingStarted = exports.cmdShowReleaseNotes = exports.cmdChooseLanguageFlavor = exports.cmdChooseDatabase = exports.cmdChangeDatabase = exports.cmdDisconnect = exports.cmdConnect = exports.cmdCopyAll = exports.cmdrevealQueryResultPanel = exports.cmdCancelQuery = exports.cmdRunCurrentStatement = exports.cmdRunQuery = exports.cmdShowToolsServiceLogs = exports.cmdShowExtensionLogs = exports.folderLabel = exports.serverLabel = exports.serverNodeType = exports.serverGroupNodeType = exports.disconnectedServerNodeType = exports.serverGroupsArrayName = exports.connectionsArrayName = exports.resultsViewerViewId = exports.connectionConfigFilename = exports.outputChannelName = exports.defaultClientEncoding = exports.connectionApplicationName = exports.queryHistory = exports.objectExplorerId = exports.noneProviderName = exports.pgsqlProviderName = exports.telemetryConfigSectionName = exports.extensionConfigSectionName = exports.extensionName = exports.extensionId = exports.languageId = void 0;
exports.defaultConnectionTimeout = exports.sqlDbPrefix = exports.enableConnectionPooling = exports.enableSqlAuthenticationProvider = exports.mssqlPiiLogging = exports.piiLogging = exports.cmdVisualizeSchema = exports.cmdGetControllerForTests = exports.cmdLaunchUserFeedback = exports.cmdEditConnection = exports.cmdEditTable = exports.cmdNewTable = exports.cmdDisableActualPlan = exports.cmdEnableActualPlan = exports.cmdShowExecutionPlanInResults = exports.cmdClearAzureTokenCache = exports.cmdAadAddAccount = exports.cmdAadRemoveAccount = exports.cmdAzureSignInToCloud = exports.cmdAzureSignInWithDeviceCode = exports.cmdAzureSignIn = exports.cmdLoadCompletionExtension = exports.cmdOpenExtension = exports.cmdClearFilters = exports.cmdFilterNodeWithExistingFilters = exports.cmdFilterNode = exports.cmdCopyObjectName = exports.cmdToggleSqlCmd = exports.cmdPsqlRunFile = exports.cmdPsqlTerminalDatabase = exports.cmdScriptAlter = exports.cmdScriptExecute = exports.cmdScriptDelete = exports.cmdScriptCreate = exports.cmdScriptSelect = exports.cmdEnableRichExperiencesCommand = exports.cmdObjectExplorerDisableGroupBySchemaCommand = exports.cmdObjectExplorerEnableGroupBySchemaCommand = exports.cmdObjectExplorerGroupBySchemaFlagName = exports.cmdOpenObjectExplorerCommand = exports.cmdConnectObjectExplorerProfile = exports.cmdConnectObjectExplorerNode = exports.cmdObjectExplorerNodeSignIn = exports.cmdDisconnectObjectExplorerNode = exports.cmdRefreshObjectExplorerNode = exports.cmdRemoveObjectExplorerNode = exports.cmdObjectExplorerNewQuery = exports.cmdCreateFreeTierDb = exports.cmdCreateDockerDb = exports.cmdCreateNewDb = void 0;
exports.copyIncludeHeaders = exports.msalCacheFileName = exports.azureAccountProviderCredentials = exports.configAzureAccount = exports.ruleNameRegex = exports.ipAddressRegex = exports.localizedTexts = exports.databaseString = exports.azureAccountExtensionId = exports.sqlToolsServiceCrashLink = exports.integratedAuthHelpLink = exports.encryptionBlogLink = exports.changelogLink = exports.gettingStartedGuideLink = exports.macOpenSslHelpLink = exports.repoUrl = exports.timeToWaitForLanguageModeChange = exports.closeDelay = exports.renamedOpenTimeThreshold = exports.untitledSaveTimeThreshold = exports.contentProviderMinFile = exports.msgContentProviderSqlOutputHtml = exports.outputServiceLocalhost = exports.outputContentTypeShowWarning = exports.outputContentTypeShowError = exports.outputContentTypeEditorSelection = exports.outputContentTypeCopy = exports.outputContentTypeOpenLink = exports.outputContentTypeSaveResults = exports.outputContentTypeConfig = exports.outputContentTypeRows = exports.outputContentTypeColumns = exports.outputContentTypeResultsetMeta = exports.outputContentTypeMessages = exports.outputContentTypeRoot = exports.maxDisplayedStatusTextLength = exports.errorSSLCertificateValidationFailed = exports.errorFirewallRule = exports.errorLoginFailed = exports.errorPasswordNeedsReset = exports.errorPasswordExpired = exports.defaultUsername = exports.defaultPort = exports.defaultDatabase = exports.sqlAuthentication = exports.integratedauth = exports.azureMfa = exports.azureDatabase = exports.defaultCommandTimeout = exports.azureSqlDbConnectionTimeout = void 0;
exports.resourceServiceName = exports.sqlToolsServiceName = exports.invalidServiceFilePath = exports.serviceLoadingFailed = exports.unsupportedPlatformErrorMessage = exports.commandsNotAvailableWhileInstallingTheService = exports.serviceInitializing = exports.schemaDesignerWebviewOtuputChannelName = exports.pgtsHashCheckFailed = exports.serviceInitializingOutputChannelName = exports.sqlToolsServiceCrashButton = exports.sqlToolsServiceCrashMessage = exports.serviceInstallationFailed = exports.serviceInstalled = exports.serviceDownloading = exports.serviceInstalling = exports.serviceInstallingTo = exports.configBYOPgBinaryDirectories = exports.configAutoDisableNonTSqlLanguageService = exports.configAutoColumnSizing = exports.configOpenQueryResultsInTabByDefaultDoNotShowPrompt = exports.configEnableNewQueryResultFeature = exports.configOpenQueryResultsInTabByDefault = exports.configShowConnectionStatusLens = exports.richFeaturesLearnMoreLink = exports.configEnableRichExperiencesDoNotShowPrompt = exports.configEnableFreeTierFlows = exports.configEnableRichExperiences = exports.configEnableExperimentalFeatures = exports.configEnableQueryHistoryFeature = exports.configEnableQueryHistoryCapture = exports.configQueryHistoryLimit = exports.configPersistQueryResultTabs = exports.configApplyLocalization = exports.extConfigResultFontFamily = exports.sqlToolsServiceDownloadUrlConfigKey = exports.sqlToolsServiceVersionConfigKey = exports.sqlToolsServiceExecutableFilesConfigKey = exports.sqlToolsServiceInstallDirConfigKey = exports.extConfigResultKeys = exports.configShowBatchTime = exports.configSplitPaneSelection = exports.configCopyRemoveNewLine = exports.configMaxRecentConnections = exports.configRecentConnections = exports.configSaveAsExcel = exports.configSaveAsJson = exports.configSaveAsCsv = exports.configMyConnections = exports.configLogDebugInfo = void 0;
exports.accessModeReadWrite = exports.accessModeReadOnly = exports.configAccessMode = exports.configChatModelOptions = exports.configChatEnable = exports.configChatSectionName = exports.cmdAnalyzeQueryPerformance = exports.cmdRewriteQuery = exports.cmdExplainQuery = exports.cmdChatWithEditor = exports.cmdConnectDatabaseInAgentMode = exports.cmdChatWithDatabase = exports.chatParticipantHandle = exports.cmdDeleteServerGroup = exports.cmdCreateServerGroup = exports.cmdEditServerGroup = exports.AzurePostgresSysDatabases = exports.DockerConstants = exports.pgVersionOutputRegex = exports.PgBinary = exports.PlatformExecDir = exports.Platform = exports.showPlanXmlColumnName = exports.sqlPlanLanguageId = exports.microsoftPrivacyStatementUrl = exports.unixResourceClientPath = exports.windowsResourceClientPath = exports.tenantDisplayName = exports.scriptSelectText = exports.v1SqlToolsServiceConfigKey = exports.sqlToolsServiceConfigKey = exports.resourceProviderId = void 0;
// Collection of Non-localizable Constants
exports.languageId = "sql";
exports.extensionId = "ms-ossdata.vscode-pgsql";
exports.extensionName = "pgsql";
exports.extensionConfigSectionName = "pgsql";
exports.telemetryConfigSectionName = "telemetry";
exports.pgsqlProviderName = "PGSQL"; // Used for SQL language flavor choices
exports.noneProviderName = "None";
exports.objectExplorerId = "objectExplorer";
exports.queryHistory = "queryHistory";
exports.connectionApplicationName = "vscode-pgsql";
exports.defaultClientEncoding = "utf8";
exports.outputChannelName = "Microsoft PostgreSQL";
exports.connectionConfigFilename = "settings.json";
exports.resultsViewerViewId = "pgQueryResult";
exports.connectionsArrayName = "connections";
exports.serverGroupsArrayName = "serverGroups";
exports.disconnectedServerNodeType = "disconnectedServer";
exports.serverGroupNodeType = "ServerGroup";
exports.serverNodeType = "Server";
exports.serverLabel = "Server";
exports.folderLabel = "Folder";
exports.cmdShowExtensionLogs = "pgsql.showExtensionLogs";
exports.cmdShowToolsServiceLogs = "pgsql.showToolsServiceLogs";
exports.cmdRunQuery = "pgsql.runQuery";
exports.cmdRunCurrentStatement = "pgsql.runCurrentStatement";
exports.cmdCancelQuery = "pgsql.cancelQuery";
exports.cmdrevealQueryResultPanel = "pgsql.revealQueryResultPanel";
exports.cmdCopyAll = "pgsql.copyAll";
exports.cmdConnect = "pgsql.connect";
exports.cmdDisconnect = "pgsql.disconnect";
exports.cmdChangeDatabase = "pgsql.changeDatabase";
exports.cmdChooseDatabase = "pgsql.chooseDatabase";
exports.cmdChooseLanguageFlavor = "pgsql.chooseLanguageFlavor";
exports.cmdShowReleaseNotes = "pgsql.showReleaseNotes";
exports.cmdShowGettingStarted = "pgsql.showGettingStarted";
exports.cmdRefreshQueryHistory = "pgsql.refreshQueryHistory";
exports.cmdClearAllQueryHistory = "pgsql.clearAllQueryHistory";
exports.cmdDeleteQueryHistory = "pgsql.deleteQueryHistory";
exports.cmdOpenQueryHistory = "pgsql.openQueryHistory";
exports.cmdRunQueryHistory = "pgsql.runQueryHistory";
exports.cmdCopyQueryHistory = "pgsql.copyQueryHistory";
exports.cmdStartQueryHistory = "pgsql.startQueryHistoryCapture";
exports.cmdPauseQueryHistory = "pgsql.pauseQueryHistoryCapture";
exports.cmdCommandPaletteQueryHistory = "pgsql.commandPaletteQueryHistory";
exports.cmdNewQuery = "pgsql.newQuery";
exports.cmdSchemaCompare = "pgsql.schemaCompare";
exports.cmdManageConnectionProfiles = "pgsql.manageProfiles";
exports.cmdClearPooledConnections = "pgsql.clearPooledConnections";
exports.cmdRebuildIntelliSenseCache = "pgsql.rebuildIntelliSenseCache";
exports.cmdAddNewConnection = "pgsql.addNewConnection";
exports.cmdCreateNewDb = "pgsql.createNewServer";
exports.cmdCreateDockerDb = "pgsql.createDockerServer";
exports.cmdCreateFreeTierDb = "pgsql.createAzureFreeTierInstance";
exports.cmdObjectExplorerNewQuery = "pgsql.objectExplorerNewQuery";
exports.cmdRemoveObjectExplorerNode = "pgsql.removeObjectExplorerNode";
exports.cmdRefreshObjectExplorerNode = "pgsql.refreshObjectExplorerNode";
exports.cmdDisconnectObjectExplorerNode = "pgsql.disconnectObjectExplorerNode";
exports.cmdObjectExplorerNodeSignIn = "pgsql.objectExplorerNodeSignIn";
exports.cmdConnectObjectExplorerNode = "pgsql.connectObjectExplorerNode";
exports.cmdConnectObjectExplorerProfile = "pgsql.connectObjectExplorerProfile";
exports.cmdOpenObjectExplorerCommand = "workbench.view.extension.objectExplorer";
exports.cmdObjectExplorerGroupBySchemaFlagName = "pgsql.objectExplorer.groupBySchema";
exports.cmdObjectExplorerEnableGroupBySchemaCommand = "pgsql.objectExplorer.enableGroupBySchema";
exports.cmdObjectExplorerDisableGroupBySchemaCommand = "pgsql.objectExplorer.disableGroupBySchema";
exports.cmdEnableRichExperiencesCommand = "pgsql.enableRichExperiences";
exports.cmdScriptSelect = "pgsql.scriptSelect";
exports.cmdScriptCreate = "pgsql.scriptCreate";
exports.cmdScriptDelete = "pgsql.scriptDelete";
exports.cmdScriptExecute = "pgsql.scriptExecute";
exports.cmdScriptAlter = "pgsql.scriptAlter";
exports.cmdPsqlTerminalDatabase = "pgsql.psqlTerminalDatabase";
exports.cmdPsqlRunFile = "pgsql.psqlRunFile";
exports.cmdToggleSqlCmd = "pgsql.toggleSqlCmd";
exports.cmdCopyObjectName = "pgsql.copyObjectName";
exports.cmdFilterNode = "pgsql.filterNode";
exports.cmdFilterNodeWithExistingFilters = "pgsql.filterNodeWithExistingFilters";
exports.cmdClearFilters = "pgsql.clearFilters";
exports.cmdOpenExtension = "extension.open";
exports.cmdLoadCompletionExtension = "pgsql.loadCompletionExtension";
exports.cmdAzureSignIn = "azure-account.login";
exports.cmdAzureSignInWithDeviceCode = "azure-account.loginWithDeviceCode";
exports.cmdAzureSignInToCloud = "azure-account.loginToCloud";
exports.cmdAadRemoveAccount = "pgsql.removeAadAccount";
exports.cmdAadAddAccount = "pgsql.addAadAccount";
exports.cmdClearAzureTokenCache = "pgsql.clearAzureAccountTokenCache";
exports.cmdShowExecutionPlanInResults = "pgsql.showExecutionPlanInResults";
exports.cmdEnableActualPlan = "pgsql.enableActualPlan";
exports.cmdDisableActualPlan = "pgsql.disableActualPlan";
exports.cmdNewTable = "pgsql.newTable";
exports.cmdEditTable = "pgsql.editTable";
exports.cmdEditConnection = "pgsql.editConnection";
exports.cmdLaunchUserFeedback = "pgsql.userFeedback";
exports.cmdGetControllerForTests = "pgsql.getControllerForTests";
exports.cmdVisualizeSchema = "pgsql.visualizeSchema";
exports.piiLogging = "piiLogging";
exports.mssqlPiiLogging = "pgsql.piiLogging";
exports.enableSqlAuthenticationProvider = "pgsql.enableSqlAuthenticationProvider";
exports.enableConnectionPooling = "pgsql.enableConnectionPooling";
exports.sqlDbPrefix = ".postgres.database.azure.com";
exports.defaultConnectionTimeout = 15;
exports.azureSqlDbConnectionTimeout = 30;
exports.defaultCommandTimeout = 30;
exports.azureDatabase = "Azure";
exports.azureMfa = "AzureMFA";
exports.integratedauth = "Integrated";
exports.sqlAuthentication = "SqlLogin";
exports.defaultDatabase = "postgres";
exports.defaultPort = 5432;
exports.defaultUsername = "postgres";
exports.errorPasswordExpired = 18487;
exports.errorPasswordNeedsReset = 18488;
exports.errorLoginFailed = 18456;
exports.errorFirewallRule = 40615;
exports.errorSSLCertificateValidationFailed = -2146893019;
exports.maxDisplayedStatusTextLength = 50;
exports.outputContentTypeRoot = "root";
exports.outputContentTypeMessages = "messages";
exports.outputContentTypeResultsetMeta = "resultsetsMeta";
exports.outputContentTypeColumns = "columns";
exports.outputContentTypeRows = "rows";
exports.outputContentTypeConfig = "config";
exports.outputContentTypeSaveResults = "saveResults";
exports.outputContentTypeOpenLink = "openLink";
exports.outputContentTypeCopy = "copyResults";
exports.outputContentTypeEditorSelection = "setEditorSelection";
exports.outputContentTypeShowError = "showError";
exports.outputContentTypeShowWarning = "showWarning";
exports.outputServiceLocalhost = "http://localhost:";
exports.msgContentProviderSqlOutputHtml = "dist/html/sqlOutput.ejs";
exports.contentProviderMinFile = "dist/js/app.min.js";
exports.untitledSaveTimeThreshold = 50.0;
exports.renamedOpenTimeThreshold = 350.0;
exports.closeDelay = 250.0;
exports.timeToWaitForLanguageModeChange = 10000.0;
exports.repoUrl = "https://github.com/microsoft/vscode-pgsql";
exports.macOpenSslHelpLink = exports.repoUrl;
exports.gettingStartedGuideLink = exports.repoUrl;
exports.changelogLink = "https://github.com/microsoft/vscode-pgsql/blob/main/CHANGELOG.md";
exports.encryptionBlogLink = exports.repoUrl;
exports.integratedAuthHelpLink = exports.repoUrl;
exports.sqlToolsServiceCrashLink = exports.repoUrl;
exports.azureAccountExtensionId = "ms-vscode.azure-account";
exports.databaseString = "Database";
exports.localizedTexts = "localizedTexts";
exports.ipAddressRegex = /\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/;
/**
 * Azure Firewall rule name convention is specified here:
 * https://azure.github.io/PSRule.Rules.Azure/en/rules/Azure.Firewall.Name/
 * When naming Azure resources, resource names must meet service requirements. The requirements for Firewall names are:
 * - Between 1 and 80 characters long.
 * - Alphanumerics, underscores, periods, and hyphens.
 * - Start with alphanumeric.
 * - End alphanumeric or underscore.
 * - Firewall names must be unique within a resource group (we can't do string validation for this, so this is ignored)
 */
exports.ruleNameRegex = /^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,78}[a-zA-Z0-9_]?$/;
exports.configAzureAccount = "azureAccount";
exports.azureAccountProviderCredentials = "azureAccountProviderCredentials";
exports.msalCacheFileName = "accessTokenCache";
// Configuration Constants
exports.copyIncludeHeaders = "copyIncludeHeaders";
exports.configLogDebugInfo = "logDebugInfo";
exports.configMyConnections = "connections";
exports.configSaveAsCsv = "saveAsCsv";
exports.configSaveAsJson = "saveAsJson";
exports.configSaveAsExcel = "saveAsExcel";
exports.configRecentConnections = "recentConnections";
exports.configMaxRecentConnections = "maxRecentConnections";
exports.configCopyRemoveNewLine = "copyRemoveNewLine";
exports.configSplitPaneSelection = "splitPaneSelection";
exports.configShowBatchTime = "showBatchTime";
var extConfigResultKeys;
(function (extConfigResultKeys) {
    extConfigResultKeys["Shortcuts"] = "shortcuts";
    extConfigResultKeys["MessagesDefaultOpen"] = "messagesDefaultOpen";
    extConfigResultKeys["ResultsFontSize"] = "resultsFontSize";
    extConfigResultKeys["ResultsFontFamily"] = "resultsFontFamily";
})(extConfigResultKeys || (exports.extConfigResultKeys = extConfigResultKeys = {}));
exports.sqlToolsServiceInstallDirConfigKey = "installDir";
exports.sqlToolsServiceExecutableFilesConfigKey = "executableFiles";
exports.sqlToolsServiceVersionConfigKey = "version";
exports.sqlToolsServiceDownloadUrlConfigKey = "downloadUrl";
exports.extConfigResultFontFamily = "resultsFontFamily";
exports.configApplyLocalization = "applyLocalization";
exports.configPersistQueryResultTabs = "persistQueryResultTabs";
exports.configQueryHistoryLimit = "queryHistoryLimit";
exports.configEnableQueryHistoryCapture = "enableQueryHistoryCapture";
exports.configEnableQueryHistoryFeature = "enableQueryHistoryFeature";
exports.configEnableExperimentalFeatures = "pgsql.enableExperimentalFeatures";
exports.configEnableRichExperiences = "pgsql.enableRichExperiences";
exports.configEnableFreeTierFlows = "pgsql.enableFreeTierFlows";
exports.configEnableRichExperiencesDoNotShowPrompt = "pgsql.enableRichExperiencesDoNotShowPrompt";
exports.richFeaturesLearnMoreLink = "https://aka.ms/mssql-rich-features";
exports.configShowConnectionStatusLens = "pgsql.showConnectionStatusLens";
exports.configOpenQueryResultsInTabByDefault = "pgsql.openQueryResultsInTabByDefault";
exports.configEnableNewQueryResultFeature = "pgsql.enableNewQueryResultFeature";
exports.configOpenQueryResultsInTabByDefaultDoNotShowPrompt = "pgsql.openQueryResultsInTabByDefaultDoNotShowPrompt";
exports.configAutoColumnSizing = "resultsGrid.autoSizeColumns";
exports.configAutoDisableNonTSqlLanguageService = "pgsql.autoDisableNonTSqlLanguageService";
exports.configBYOPgBinaryDirectories = "pgsql.pgBinaryDirs";
// ToolsService Constants
exports.serviceInstallingTo = "Installing PostgreSQL Tools Service to";
exports.serviceInstalling = "Installing";
exports.serviceDownloading = "Downloading";
exports.serviceInstalled = "PostgreSQL Tools Service installed";
exports.serviceInstallationFailed = "Failed to install PostgreSQL Tools Service";
exports.sqlToolsServiceCrashMessage = "PostgreSQL Tools Service component could not start.";
exports.sqlToolsServiceCrashButton = "View Known Issues";
exports.serviceInitializingOutputChannelName = "PgToolsService Initialization";
exports.pgtsHashCheckFailed = "PGSQL Tools Service download had an invalid hash. Try uninstalling the extension to re-download.";
exports.schemaDesignerWebviewOtuputChannelName = "SchemaDesigner Webview";
exports.serviceInitializing = "Initializing PostgreSQL Tools Service for the pgsql extension.";
exports.commandsNotAvailableWhileInstallingTheService = "Note: pgsql commands will be available after installing the service.";
exports.unsupportedPlatformErrorMessage = "The platform is not supported";
exports.serviceLoadingFailed = "Failed to load PostgreSQL Tools Service";
exports.invalidServiceFilePath = "Invalid file path for PostgreSQL Tools Service";
exports.sqlToolsServiceName = "Microsoft PostgreSQL Tools Service";
exports.resourceServiceName = "AzureResourceProvider";
exports.resourceProviderId = "azurePublicCloud";
exports.sqlToolsServiceConfigKey = "service";
exports.v1SqlToolsServiceConfigKey = "v1Service";
exports.scriptSelectText = "SELECT TOP (1000) * FROM ";
exports.tenantDisplayName = "Microsoft";
exports.windowsResourceClientPath = "SqlToolsResourceProviderService.exe";
exports.unixResourceClientPath = "SqlToolsResourceProviderService";
exports.microsoftPrivacyStatementUrl = "https://go.microsoft.com/fwlink/?LinkId=521839";
exports.sqlPlanLanguageId = "sqlplan";
exports.showPlanXmlColumnName = "Microsoft SQL Server 2005 XML Showplan";
var Platform;
(function (Platform) {
    Platform["Windows"] = "win32";
    Platform["Mac"] = "darwin";
    Platform["Linux"] = "linux";
})(Platform || (exports.Platform = Platform = {}));
exports.PlatformExecDir = { win32: "win", darwin: "mac", linux: "linux" };
var PgBinary;
(function (PgBinary) {
    PgBinary["PSQL"] = "psql";
    PgBinary["PGDUMP"] = "pg_dump";
    PgBinary["PGRESTORE"] = "pg_restore";
    PgBinary["PGDUMPALL"] = "pg_dumpall";
})(PgBinary || (exports.PgBinary = PgBinary = {}));
exports.pgVersionOutputRegex = /^.*\s([0-9]+)(\.[0-9]*)?(\.[0-9]*)?/;
var DockerConstants;
(function (DockerConstants) {
    DockerConstants.dockerReadyCheckIntervalMs = 2000;
    DockerConstants.dockerReadyCheckTimeoutMs = 5000;
    DockerConstants.dockerHostIpStr = "localhost";
    DockerConstants.dockerEnvVarDbName = "POSTGRES_DB";
    DockerConstants.dockerEnvVarDbUser = "POSTGRES_USER";
    DockerConstants.dockerEnvVarDbPass = "POSTGRES_PASSWORD";
    DockerConstants.dockerHostPortMax = 55000;
    DockerConstants.dockerHostPortMin = 54500;
    DockerConstants.dockerHostPortTries = 3;
    DockerConstants.dockerDefaultDbPort = 5432;
    DockerConstants.dockerRandomDbPort = 0;
    DockerConstants.dockerImageBasename = "postgres";
    DockerConstants.dockerImageVerDefault = "latest";
    DockerConstants.dockerProfileNameRegex = /^[a-zA-Z0-9][a-zA-Z0-9_.-\s]*$/g;
    DockerConstants.dockerContainerNameRegex = /^[a-zA-Z0-9][a-zA-Z0-9_.-]*$/g;
    DockerConstants.pgUsernameRegex = /^[a-zA-Z_][a-zA-Z0-9_]*$/g;
    DockerConstants.dockerBindPortMin = 1;
    DockerConstants.dockerBindPortMax = 65535;
    DockerConstants.pgCheckDbReadyCmd = "pg_isready";
    DockerConstants.portBindLabel = "5432/tcp";
})(DockerConstants || (exports.DockerConstants = DockerConstants = {}));
exports.AzurePostgresSysDatabases = ["azure_maintenance", "azure_sys"];
// Connection Groups
exports.cmdEditServerGroup = "pgsql.editServerGroup";
exports.cmdCreateServerGroup = "pgsql.createServerGroup";
exports.cmdDeleteServerGroup = "pgsql.deleteServerGroup";
// chat
exports.chatParticipantHandle = "pgsql"; // Must match the handle in package.json
exports.cmdChatWithDatabase = "pgsql.copilot.chatWithDatabase";
exports.cmdConnectDatabaseInAgentMode = "pgsql.copilot.connectDatabaseInAgentMode";
exports.cmdChatWithEditor = "pgsql.copilot.chatWithEditor";
exports.cmdExplainQuery = "pgsql.copilot.explainQuery";
exports.cmdRewriteQuery = "pgsql.copilot.rewriteQuery";
exports.cmdAnalyzeQueryPerformance = "pgsql.copilot.analyzeQueryPerformance";
exports.configChatSectionName = "pgsql.copilot";
exports.configChatEnable = "pgsql.copilot.enable";
exports.configChatModelOptions = "modelOptions";
exports.configAccessMode = "accessMode";
exports.accessModeReadOnly = "read-only";
exports.accessModeReadWrite = "read/write";

//# sourceMappingURL=constants.js.map
